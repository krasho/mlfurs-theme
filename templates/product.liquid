	<section class="product-card">
		<div class="container-fluid">

			<div class="row">
				<div class="col-12">
				    {% assign class_to_link = 'breadcrumbs__link breadcrumbs__link_dark' %}
					{% assign class_to_breadcrumbs = 'breadcrumbs product-card__breadcrumbs breadcrumbs_size_sm' %}
					{% assign class_to_item = 'breadcrumbs__item .breadcrumbs__item_dark' %}
					{% assign class_to_last_item = 'breadcrumbs__item breadcrumbs__item_dark breadcrumbs__item_disabled' %}
				    {% include 'breadcrumbs' %}
				</div>
			</div>
         	
			{% section 'product_detail_information' %}

		</div>
	</section>


	

	<section class="catalog-home-page">
		<div class="container-fluid">
			<div class="row">
				<div class="col-12">
					<div class="catalog-home-page__title">Related products</div>
				</div>
			</div>
			<div class="row">				
			{%- assign RELATED_PRODUCTS_LIMIT = 4 -%}
			{%- include 'related-products' -%}
			</div>
		</div>
	</section>


  {% section 'subscribe' %}


<script>
	window.mlfurs= window.mlfurs|| {};   
	
	
	mlfurs = {
	   filters: [],	
       filter_available: [],
	   filter_to_show: [],
	   product_variants: [],       
	   filters_selected: [],
	   product_variants_available:[],
	   firstFilterApplied: "",


	   initializeValues: function() {
		   this.createFilters();
		   this.createVariantsAvailables();		   		   
	   },

	   createFilters: function() {		   
			let option_name_downcase = ""    

			{% for option in product.options_with_values %}
				option_name_downcase = "{{option.name | remove:' ' | remove: '/' | downcase }}"	        
				this.filters.push(option_name_downcase)
				this.filter_available[option_name_downcase] = []
				this.filters_selected[option_name_downcase] = ""


				{% for value in option.values %}		   
					this.filter_available[option_name_downcase].push("{{value}}")
				{% endfor %}
			{% endfor %}  
	   },

	   createVariantsAvailables: function() {
		    let option_name_downcase = ""
			let variant_value = ""
			let product_variant_available= []

			{% for variant in product.variants %}
				product_variant_available = []
				
				variant_value = ""
				{% for option in product.options_with_values %}
					option_name_downcase = "{{option.name | downcase}}";

					{%- if forloop.index == 1 -%}
							variant_value = "{{variant.option1}}";
					{%- elsif forloop.index == 2 -%}
							variant_value = "{{variant.option2}}";
					{%- else  -%}
							variant_value = "{{variant.option3}}";
					{%- endif -%}

					variant_value = variant_value.split("/").join("")
                    variant_value = variant_value.split(" ").join("")

					
					product_variant_available[option_name_downcase] = variant_value;
				
				{% endfor %}
				
			    product_variant_available['available'] = "{{variant.available}}"
				product_variant_available['id'] = "{{variant.id}}"
				product_variant_available['inventory_quantity'] = "{{variant.inventory_quantity}}"
				product_variant_available['show'] = "true"

				this.product_variants.push(product_variant_available)
				
			{% endfor %}  
	   },

	   changeFiltersSelected: function(type, value) {
		   this.filters_selected[type] = value;

		   if (this.filters_selected[type] == "") {
			   delete this.filter_to_show[type];
		   }
	   },

	   applyFilters: function(type, value) {
		   this.setFirtFilterApplied(type);
		   this.changeFiltersSelected(type, value);
		

			if (this.checkIfThereIsFilterSelected() == false) {
				this.resetAll();
			} else {
				
				this.getVariantsSatisfyTheFilters()
				this.getUniqueValuesForFilterAvailable(type);		   
			}
	   },

	   getVariantsSatisfyTheFilters() {
           this.product_variants_available = this.product_variants;

           for(name in this.filters_selected) {
			   value = this.filters_selected[name];

			   if (value == "") {
				   continue
			   }

               this.product_variants_available = this.product_variants_available.filter(variant => variant[name] == value && variant['available'] == "true")		   
		   }		  
	   },

	   getUniqueValuesForFilterAvailable(type) {
		   for(filter in this.filters) {
			   name = this.filters[filter];

			   if (name == type) {
				   continue;
			   }

			   this.filter_to_show[name] =  this.getUniqueValueByFilter(name);
		   }

	   },

	   getUniqueValueByFilter(filterName) {
		   return this.product_variants_available.map(function(e){ return e[filterName]}).filter(function(e, i, a) {
			      return i === a.indexOf(e)
		   });

	   },

	   validateIfElementExist(filterName, elementToFind) {

		   return this.filter_to_show[filterName].includes(elementToFind);
	   },

	   validateIfAllFilterAreSelected() {
		   let quantity = this.filters.length;

           let quantityFilterSelected = 0; 

		   for(selected in this.filters_selected) {
			   if (this.filters_selected[selected] != "") {
				   quantityFilterSelected++; 
			   }			       
		   }

		   if (quantityFilterSelected == quantity) {
			   return true
		   }

		   return false		
	   },


	   checkAvailableInVariantAvailablefunction: function(){
		if (this.product_variants_available.length == 0) {
			return false
		}

		if (this.product_variants_available[0]['available'] == "false") {
			return false;
		}


		return true;
		},

		setFirtFilterApplied(filterName) {
			if (this.checkIfThereIsFilterSelected() == false) {
				this.firstFilterApplied = filterName;
			}
		},

		resetFirstFilterApplied() {
			for(filter in this.filters) {
				filter_name = this.filters[filter];

				if (filter_name == this.firstFilterApplied) {
					continue;
				}


				newFirstFilter  = filter_name;
			}


			this.firstFilterApplied = newFirstFilter

		},

		removeElementToShow(filterName) {
			delete this.filter_to_show[filterName];
		},


		checkIfThereIsFilterSelected() {
			let filtered = 0;
			for (filter in this.filters) {
				 filter_name = this.filters[filter];

				 if (this.filters_selected[filter_name] != "") {
					 filtered++;
				 }
			}


			if (filtered == 0 ) {
				return false;
			} 

			return true;

		},

		resetAll() {
	       this.filter_to_show = [];
		   this.product_variants_available = [];
		   this.firstFilterApplied = "";

			for (filter in this.filters) {
				filter_name = this.filters[filter];
				this.changeFiltersSelected(filter_name, "");
			}

		}
	}

	mlfurs.initializeValues();	
</script>